from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

btnBack = KeyboardButton('‚èÆ–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

btnMainEge = KeyboardButton('üìö–ï–ì–≠')
btnMainSam = KeyboardButton('ü§ì –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ')
btnMainLanHelp = KeyboardButton('‚úÖ–ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞')
mainMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(btnMainEge, btnMainSam, btnMainLanHelp)


btnEgePascal = KeyboardButton('üî§Pascal')
btnEgePython = KeyboardButton('üêçPython')
btnEgeCpp = KeyboardButton('‚ûïC++')
egeLanMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnEgePascal, btnEgePython, btnEgeCpp, btnBack)

btnSamCs = KeyboardButton('#Ô∏è‚É£C#')
btnSamPython = KeyboardButton('üêçPyth–æn')
btnSamPascal = KeyboardButton('üî§Pasc–∞l')
samMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnSamCs, btnSamPython, btnSamPascal, btnBack)

btnSamCs1 = KeyboardButton('–£—Å–ª–æ–≤–∏—è C#')
btnSamCs2 = KeyboardButton('–¶–∏–∫–ª—ã C#')
btnSamCs3 = KeyboardButton('–ú–∞—Å—Å–∏–≤—ã C#')
SamCsMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnSamCs1, btnSamCs2, btnSamCs3, btnBack)

btnSamPython1 = KeyboardButton('–£—Å–ª–æ–≤–∏—è üêç')
btnSamPython2 = KeyboardButton('–¶–∏–∫–ª—ã üêç')
btnSamPython3 = KeyboardButton('–ú–∞—Å—Å–∏–≤—ã üêç')
SamPythonMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnSamPython1, btnSamPython2, btnSamPython3, btnBack)

btnSamPascal1 = KeyboardButton('–ü–µ—Ä–≤–∞—è üî§')
btnSamPascal2 = KeyboardButton('–í—Ç–æ—Ä–∞—è üî§')
btnSamPascal3 = KeyboardButton('–¢—Ä–µ—Ç—å—è üî§')
SamPascalMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnSamPascal1, btnSamPascal2, btnSamPascal3, btnBack)

lanHelpMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnBack)

btnIfElseCs = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä If Else C#")
btnSwitchCs = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä Switch C#")

btnWhileCs = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä while C#")
btnWhileDoCs = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä do while C#")
btnForCs = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä for C#")

btnMakeCs = KeyboardButton("–û–±—å—è–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ C#")
btnInitCs = KeyboardButton("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ C#")
btnSortCs = KeyboardButton("–ü—Ä–∏–º–µ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ C#")

UslCsMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(btnIfElseCs, btnSwitchCs, btnBack)
CycleCsMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(btnWhileCs, btnWhileDoCs, btnForCs, btnBack)
MasCsMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(btnMakeCs, btnInitCs, btnSortCs, btnBack)

btnIfPy = KeyboardButton("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if üêç")
btnIfElsePy = KeyboardButton("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if - else üêç")
btnIfElifPy = KeyboardButton("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if - elif - else üêç")

btnForPy = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä for üêç")
btnWhilePy = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä while üêç")
btnBreakConPy = KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä—ã break –∏ continue üêç")

btnCreateMasPy = KeyboardButton("–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ üêç")
btnPyMasMethods = KeyboardButton("–ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ üêç")
btnPyObhodMas = KeyboardButton("–û–±—Ö–æ–¥ –º–∞—Å—Å–∏–≤–æ–≤ üêç")

UslPyMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(btnIfPy, btnIfElsePy, btnIfElifPy, btnBack)
CyclePyMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(btnForPy, btnWhilePy, btnBreakConPy, btnBack)
MasPyMenu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(btnCreateMasPy, btnPyMasMethods, btnPyObhodMas, btnBack)
